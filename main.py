from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "7755831899:AAHa_dY3xNH0jv1Hn0yUVN4FFmUxFB3WQkw"

catalog = {
    "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –º—ã–ª–æ": [
        {
            "name": "–ö–∞–ª–µ–Ω–¥—É–ª–∞ –∏ –æ–±–ª–µ–ø–∏—Ö–∞",
            "price": "450‚ÇΩ",
            "desc": "–ú—ã–ª–æ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –º–∞—Å–ª–æ–º –æ–±–ª–µ–ø–∏—Ö–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è –∫–æ–∂–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∏—Ü–∞ –∏ —Ç–µ–ª–∞.",
            "image": "IMG_8981.png"
        },
        {
            "name": "–ì–ª–∏–Ω—Ç–≤–µ–π–Ω",
            "price": "450‚ÇΩ",
            "desc": "–ú—ã–ª–æ —Å —è—Ä–∫–∏–º –∞—Ä–æ–º–∞—Ç–æ–º –∫–æ—Ä–∏—Ü—ã –∏ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–æ–º –∞–ø–µ–ª—å—Å–∏–Ω–∞ –¥–ª—è –Ω–µ–∂–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è –∫–æ–∂–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∏—Ü–∞ –∏ —Ç–µ–ª–∞.",
            "image": "IMG_8980.png"
        },
        {
            "name": "–ú–∞–Ω–≥–æ –∏ –∞–ø–µ–ª—å—Å–∏–Ω",
            "price": "450‚ÇΩ",
            "desc": "–ú—ã–ª–æ —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º –º–∞—Å–ª–æ–º –º–∞–Ω–≥–æ –∏ —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–æ–º –∞–ø–µ–ª—å—Å–∏–Ω–∞. –ë–µ—Ä–µ–∂–Ω–æ –æ—á–∏—â–∞–µ—Ç –∏ —É–≤–ª–∞–∂–Ω—è–µ—Ç –∫–æ–∂—É. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–∏—Ü–∞ –∏ —Ç–µ–ª–∞.",
            "image": "IMG_8979.png"
        },
        {
            "name": "–†–æ–∑–∞ –∏ —à–µ–ª–∫",
            "price": "450‚ÇΩ",
            "desc": "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –º—ã–ª–æ —Å —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–æ–º —Ä–æ–∑—ã, –≥–∏–¥—Ä–æ–ª–∞—Ç–æ–º —Ä–æ–∑—ã –∏ —à–µ–ª–∫–æ–º. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–∏, —Å–º—è–≥—á–∞–µ—Ç –∏ —É–≤–ª–∞–∂–Ω—è–µ—Ç.",
            "image": "IMG_8978.png"
        }
    ],
    "–ì–∏–¥—Ä–æ–ª–∞—Ç—ã": [
        {
            "name": "–ì–∏–¥—Ä–æ–ª–∞—Ç –º–∞–ª–∏–Ω—ã",
            "price": "400‚ÇΩ",
            "desc": "–ì–∏–¥—Ä–æ–ª–∞—Ç –º–∞–ª–∏–Ω—ã –æ–±–ª–∞–¥–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º —É–≤–ª–∞–∂–Ω—è—Ç—å –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—Ç—å –∫–æ–∂—É; –æ–±–ª–∞–¥–∞–µ—Ç –æ—á–∏—â–∞—é—â–∏–º –∏ —Ç–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º.",
            "image": None
        },
        {
            "name": "–ì–∏–¥—Ä–æ–ª–∞—Ç —á–µ—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω—ã",
            "price": "400‚ÇΩ",
            "desc": "–ì–∏–¥—Ä–æ–ª–∞—Ç —á—ë—Ä–Ω–æ–π —Å–º–æ—Ä–æ–¥–∏–Ω—ã –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞—Ä–µ–Ω–∏—è, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ–Ω –∫–æ–∂–∏. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—Ö–æ–π –∏ —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ–π –∫–æ–∂–∏.",
            "image": None
        }
    ]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"category|{cat}")]
                for cat in catalog]
    await update.message.reply_text("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ MOZ cosmetics!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('|')

    if data[0] == "category":
        category = data[1]
        keyboard = [[InlineKeyboardButton(p["name"], callback_data=f"product|{category}|{i}")]
                    for i, p in enumerate(catalog[category])]
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_main")
        ])
        try:
            await query.edit_message_text(
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif data[0] == "product":
        category = data[1]
        index = int(data[2])
        product = catalog[category][index]
        caption = f"<b>{product['name']}</b>\n–¶–µ–Ω–∞: {product['price']}\n\n{product['desc']}"
        buttons = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category|{category}"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_main")
            ]
        ])
        try:
            await query.message.delete()
        except:
            pass
        if product["image"]:
            try:
                with open(product["image"], 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=buttons
                    )
            except:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                    reply_markup=buttons
                )
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )

    elif data[0] == "back_to_main":
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"category|{cat}")]
                    for cat in catalog]
        try:
            await query.edit_message_text("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ MOZ cosmetics!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        except:
            await context.bot.send_message(chat_id=query.message.chat_id, text="üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ MOZ cosmetics!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
